// ========================================
// Diagrama 7B: Grafo de Dependências entre Módulos
// Formato: GraphViz DOT
// Como compilar: dot -Tpng 07_code_structure_dependencies.dot -o dependencies.png
// Como compilar SVG: dot -Tsvg 07_code_structure_dependencies.dot -o dependencies.svg
// ========================================

digraph CodeDependencies {
    // Global attributes
    graph [
        rankdir=TB
        bgcolor="#ffffff"
        fontname="Arial"
        fontsize=12
        concentrate=true
        compound=true
    ]
    
    node [
        shape=box
        style="rounded,filled"
        fontname="Arial"
        fontsize=10
    ]
    
    edge [
        fontname="Arial"
        fontsize=9
        color="#666666"
    ]
    
    // ========================================
    // Subgraph: Configuration Layer
    // ========================================
    subgraph cluster_config {
        label="Configuration Layer"
        style=filled
        color=lightgrey
        
        dvc_yaml [label="dvc.yaml\n(Pipeline orchestration)" fillcolor="#e1f5ff"]
        exp_config [label="configs/experiment_config.yaml\n(Hyperparameters)" fillcolor="#e3f2fd"]
        prep_config [label="configs/preprocessing.yaml\n(Data split config)" fillcolor="#e3f2fd"]
        samp_config [label="configs/sampling.yaml\n(Sampling strategy)" fillcolor="#e3f2fd"]
    }
    
    // ========================================
    // Subgraph: Data Pipeline Scripts (DVC)
    // ========================================
    subgraph cluster_dvc_scripts {
        label="Data Pipeline Scripts"
        style=filled
        color="#c8e6c9"
        
        dvc_quality [label="dvc_run_quality_check.py\nEntry: main()" fillcolor="#a5d6a7"]
        dvc_sampling [label="dvc_sampling.py\nEntry: main()" fillcolor="#a5d6a7"]
        dvc_eda [label="src/eda/dvc_eda.py\nEntry: main()" fillcolor="#a5d6a7"]
        dvc_preproc [label="dvc_preprocessing.py\nEntry: main()" fillcolor="#a5d6a7"]
    }
    
    // ========================================
    // Subgraph: Core Modules
    // ========================================
    subgraph cluster_core {
        label="Core Business Logic Modules"
        style=filled
        color="#ffccbc"
        
        quality_mod [label="check_dataset_quality.py\nFunctions:\n- check_missing_values()\n- check_duplicates()\n- check_data_types()\n- check_label_distribution()" fillcolor="#ffab91"]
        
        eda_funcs [label="src/eda/\nEDA Analysis Functions\n(distributions, correlations,\nstatistical tests)" fillcolor="#ffab91"]
    }
    
    // ========================================
    // Subgraph: Experiment Core
    // ========================================
    subgraph cluster_experiments {
        label="Experimentation Engine"
        style=filled
        color="#f8bbd0"
        
        run_single [label="experiments/run_single_algorithm.py\nEntry: main(algorithm_name)\nCLI interface for single runs" fillcolor="#f48fb1"]
        
        algo_comp [label="experiments/algorithm_comparison.py\n*** CENTRAL MODULE ***\n\nFunctions:\n- run_experiment(algorithm)\n- train_and_evaluate()\n- train_model()\n- predict_model()\n- calculate_metrics()\n- setup_logging()\n- monitor_memory()\n\nGlobals:\n- ALGORITHM_CONFIGS\n- ALGORITHMS_ORDER\n- TEST_MODE, N_RUNS" fillcolor="#e91e63" fontcolor="white" penwidth=3]
        
        metrics_col [label="experiments/enhanced_metrics_collector.py\nResource Monitoring\n\nFunctions:\n- get_system_info()\n- collect_enhanced_metrics()\n- monitor_resource_usage_detailed()\n- get_cpu_details()\n- get_memory_details()" fillcolor="#f06292"]
        
        individual [label="experiments/individual_analysis.py\nPer-Algorithm Analysis\n\nMain: analyze_single_algorithm()\nFunctions:\n- aggregate_by_params()\n- plot_performance()\n- plot_resource_usage()\n- generate_summary_report()" fillcolor="#f06292"]
        
        consolidate [label="experiments/consolidate_results.py\nCross-Algorithm Consolidation\n\nMain: consolidate_all()\nFunctions:\n- load_all_results()\n- compare_algorithms()\n- rank_by_metric()\n- generate_comparison_plots()" fillcolor="#f06292"]
        
        advanced_plots [label="experiments/iot_advanced_plots.py\nAdvanced Visualization\n\nFunctions:\n- generate_all_iot_advanced_plots()\n- plot_pareto_frontier()\n- plot_scalability_analysis()\n- plot_resource_radar_charts()" fillcolor="#f06292"]
    }
    
    // ========================================
    // Subgraph: External Dependencies
    // ========================================
    subgraph cluster_external {
        label="External Libraries"
        style=filled
        color="#e1bee7"
        
        sklearn [label="scikit-learn\n- Models\n- Metrics\n- Preprocessing" shape=ellipse fillcolor="#ce93d8"]
        mlflow [label="MLflow\n- Tracking\n- Logging" shape=ellipse fillcolor="#ce93d8"]
        pandas [label="pandas\nDataFrame operations" shape=ellipse fillcolor="#ce93d8"]
        numpy [label="numpy\nArray operations" shape=ellipse fillcolor="#ce93d8"]
        matplotlib [label="matplotlib/seaborn\nVisualization" shape=ellipse fillcolor="#ce93d8"]
        psutil [label="psutil\nSystem monitoring" shape=ellipse fillcolor="#ce93d8"]
    }
    
    // ========================================
    // Data Artifacts (Files/Directories)
    // ========================================
    subgraph cluster_data {
        label="Data Artifacts"
        style=filled
        color="#c5cae9"
        
        raw_data [label="data/raw/CSV/\nOriginal dataset" shape=folder fillcolor="#9fa8da"]
        sampled_data [label="data/processed/sampled.csv\nSampled dataset" shape=folder fillcolor="#9fa8da"]
        train_test [label="data/processed/\ntrain/test normalized\nnumpy arrays\nscaler.pkl" shape=folder fillcolor="#9fa8da"]
        quality_metrics [label="data/metrics/\nquality_check.json\nsampling_results.json" shape=folder fillcolor="#9fa8da"]
        results [label="experiments/results/\ntest/ & full/\ntimestamp_algorithm/" shape=folder fillcolor="#9fa8da"]
        mlflow_dir [label="mlflow-tracking/\nmlruns/\nmlflow.db" shape=folder fillcolor="#9fa8da"]
    }
    
    // ========================================
    // Configuration Dependencies
    // ========================================
    dvc_yaml -> dvc_quality [label="stage: check_quality"]
    dvc_yaml -> dvc_sampling [label="stage: sampling"]
    dvc_yaml -> dvc_eda [label="stage: eda"]
    dvc_yaml -> dvc_preproc [label="stage: preprocess"]
    dvc_yaml -> run_single [label="stages: exp_*"]
    dvc_yaml -> consolidate [label="stage: consolidate"]
    
    exp_config -> algo_comp [label="hyperparameters"]
    prep_config -> dvc_preproc [label="split config"]
    samp_config -> dvc_sampling [label="sampling params"]
    
    // ========================================
    // Pipeline Flow
    // ========================================
    dvc_quality -> quality_mod [label="import"]
    quality_mod -> raw_data [label="read"]
    quality_mod -> quality_metrics [label="write"]
    
    dvc_sampling -> raw_data [label="read"]
    dvc_sampling -> sampled_data [label="write" color="red" penwidth=2]
    
    dvc_eda -> sampled_data [label="read"]
    dvc_eda -> eda_funcs [label="call"]
    
    dvc_preproc -> sampled_data [label="read"]
    dvc_preproc -> train_test [label="write" color="red" penwidth=2]
    
    // ========================================
    // Experiment Execution Flow
    // ========================================
    run_single -> algo_comp [label="import & call" color="blue" penwidth=2]
    
    algo_comp -> train_test [label="load data" color="green" penwidth=2]
    algo_comp -> metrics_col [label="import & call"]
    algo_comp -> results [label="save JSON"]
    algo_comp -> mlflow_dir [label="log to MLflow"]
    algo_comp -> individual [label="triggers via DVC"]
    
    individual -> results [label="read & augment"]
    individual -> consolidate [label="triggers via DVC"]
    
    consolidate -> results [label="read all & summarize"]
    consolidate -> advanced_plots [label="import & call"]
    
    // ========================================
    // External Library Dependencies
    // ========================================
    algo_comp -> sklearn [label="models & metrics" style=dashed]
    algo_comp -> mlflow [label="tracking" style=dashed]
    algo_comp -> pandas [label="dataframes" style=dashed]
    algo_comp -> numpy [label="arrays" style=dashed]
    
    metrics_col -> psutil [label="system stats" style=dashed]
    
    individual -> matplotlib [label="plotting" style=dashed]
    individual -> pandas [label="analysis" style=dashed]
    
    consolidate -> matplotlib [label="plotting" style=dashed]
    consolidate -> pandas [label="aggregation" style=dashed]
    
    advanced_plots -> matplotlib [label="advanced viz" style=dashed]
    
    // ========================================
    // Legend
    // ========================================
    {
        rank=sink
        legend [
            shape=plaintext
            label=<
                <TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4">
                <TR><TD COLSPAN="2"><B>Legend</B></TD></TR>
                <TR><TD>Solid Line</TD><TD>Direct Import/Call</TD></TR>
                <TR><TD>Dashed Line</TD><TD>Library Dependency</TD></TR>
                <TR><TD>Red Line</TD><TD>Critical Data Flow</TD></TR>
                <TR><TD>Blue Line</TD><TD>Main Entry Point</TD></TR>
                <TR><TD>Green Line</TD><TD>Data Loading</TD></TR>
                </TABLE>
            >
        ]
    }
}

